/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * https://nickcoutsos.github.io/keymap-editor/
 * https://github.com/caksoylar/keymap-drawer
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&lt { tapping-term-ms = <400>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESCAPE>;
        };

        combo_bksp {
            timeout-ms = <50>;
            key-positions = <9 8>;
            bindings = <&kp BACKSPACE>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };

        combo_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <25 26>;
        };

        combo_rshift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <33 34>;
        };

        as_lshift {
            bindings = <&kp LSHIFT>;
            key-positions = <13 14>;
        };

        lsemicolon_rshift {
            bindings = <&kp RSHIFT>;
            key-positions = <21 22>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <9 10>;
        };

        // Single keys

        exclm {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        dllr {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        percnt {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
        };

        str {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
        };

        leftparen {
            bindings = <&kp LPAR>;
            key-positions = <9 21>;
        };

        rparen {
            bindings = <&kp RPAR>;
            key-positions = <10 22>;
        };

        // System keys

        sys_reset_l {
            bindings = <&sys_reset>;
            key-positions = <25 26 27>;
            layers = <3>;
        };

        sys_reset_r {
            bindings = <&sys_reset>;
            key-positions = <32 33 34>;
            layers = <3>;
        };

        bootloader_l {
            bindings = <&bootloader>;
            key-positions = <27 28 29>;
            layers = <3>;
        };

        bootloader_r {
            bindings = <&bootloader>;
            key-positions = <30 31 32>;
            layers = <3>;
        };

        // Layers

        combo_to_qwerty_layer {
            bindings = <&tog 0>;
            key-positions = <36 37 40 41>;
        };

        combo_to_qwerty_combo_layer {
            bindings = <&tog 4>;
            key-positions = <40 41>;
        };

        combo_mo_sys_layer {
            bindings = <&mo 3>;
            key-positions = <36 37>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        hmr: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hlt: hold_and_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_AND_TAB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        td_q: td_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Q";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&none>, <&kp LA(LC(NUMBER_1))>;
        };
    };

    macros {
        ctrlalt1: ctrlalt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(KP_NUMBER_1))>;
            label = "CTRLALT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&trans  &td_q         &kp W         &kp E             &kp R         &kp T              &kp Y             &kp U                     &kp I              &kp O         &kp P                  &trans
&trans  &hmr LSHFT A  &hmr LCTRL S  &hmr LEFT_ALT D   &kp F         &hmr LEFT_WIN G    &hmr RIGHT_WIN H  &kp J                     &hmr RIGHT_ALT K   &hmr RCTRL L  &hmr RSHIFT SEMICOLON  &trans
&trans  &kp Z         &hlt X LC(X)  &hlt C LC(X)      &hlt V LC(V)  &kp B              &kp N             &kp M                     &kp COMMA          &kp DOT       &kp FSLH               &trans
                                    &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 2 SPACE        &lt 1 ENTER       &mt LEFT_SHIFT BACKSPACE  &mt RIGHT_ALT ESC
            >;
        };

        numsym_layer {
            bindings = <
&trans  &kp N1        &kp N2     &kp N3   &kp N4   &kp N5          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans        &trans
&trans  &kp NUMBER_6  &kp N7     &kp N8   &kp N9   &kp NUMBER_0    &kp LEFT          &kp DOWN           &kp UP          &kp RIGHT        &kp ASTERISK  &trans
&trans  &kp GRAVE     &kp TILDE  &kp DQT  &kp SQT  &kp BSLH        &kp LESS_THAN     &kp GREATER_THAN   &kp MINUS       &kp EQUAL        &kp SLASH     &trans
                                 &trans   &trans   &trans          &trans            &trans             &trans
            >;
        };

        fun_layer {
            bindings = <
&trans  &kp F1  &kp F4  &kp F7  &kp F10  &kp C_VOL_UP    &kp C_BRIGHTNESS_INC  &kp K_PASTE     &kp UP_ARROW    &kp K_COPY  &kp ESC        &trans
&trans  &kp F2  &kp F5  &kp F8  &kp F11  &kp C_MUTE      &kp C_PLAY_PAUSE      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT   &kp PG_UP      &trans
&trans  &kp F3  &kp F6  &kp F9  &kp F12  &kp C_VOL_DN    &kp C_BRIGHTNESS_DEC  &kp K_UNDO      &kp K_REDO      &kp K_CUT   &kp PAGE_DOWN  &trans
                        &trans  &trans   &trans          &trans                &trans          &trans
            >;
        };

        sys_layer {
            bindings = <
&trans  &trans        &trans        &bt BT_PRV    &bt BT_NXT    &trans            &none   &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &trans  &none   &none   &none   &none   &trans
&trans  &bootloader   &sys_reset    &none         &bt BT_CLR    &bt BT_CLR_ALL    &none   &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans            &trans  &trans  &trans
            >;
        };

        layer_QWERTY_Combo {
            bindings = <
&trans  &kp Q  &kp W         &kp E             &kp R         &kp T          &kp Y        &kp U                     &kp I              &kp O    &kp P          &trans
&trans  &kp A  &kp S         &kp D             &kp F         &kp G          &kp H        &kp J                     &kp K              &kp L    &kp SEMICOLON  &trans
&trans  &kp Z  &hlt X LC(X)  &hlt C LC(X)      &hlt V LC(V)  &kp B          &kp N        &kp M                     &kp COMMA          &kp DOT  &kp FSLH       &trans
                             &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 2 SPACE    &lt 1 ENTER  &mt LEFT_SHIFT BACKSPACE  &mt RIGHT_ALT ESC
            >;
        };

        ahk_layer {
            bindings = <
&trans  &kp LA(LC(NUMBER_1))  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans                &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
