/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * https://nickcoutsos.github.io/keymap-editor/
 * https://github.com/caksoylar/keymap-drawer
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&lt { tapping-term-ms = <400>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESCAPE>;
        };

        combo_bksp {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp BACKSPACE>;
        };

        as_lshift {
            bindings = <&kp LSHIFT>;
            key-positions = <13 14>;
        };

        lsemicolon_rshift {
            bindings = <&kp RSHIFT>;
            key-positions = <21 22>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <9 10>;
        };

        exclm {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        dllr {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        percnt {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
        };

        str {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
        };

        leftparen {
            bindings = <&kp LPAR>;
            key-positions = <9 21>;
        };

        rparen {
            bindings = <&kp RPAR>;
            key-positions = <10 22>;
        };

        sys_reset_l {
            bindings = <&sys_reset>;
            key-positions = <25 26 27>;
            layers = <3>;
        };

        sys_reset_r {
            bindings = <&sys_reset>;
            key-positions = <32 33 34>;
            layers = <3>;
        };

        bootloader_l {
            bindings = <&bootloader>;
            key-positions = <27 28 29>;
            layers = <3>;
        };

        bootloader_r {
            bindings = <&bootloader>;
            key-positions = <30 31 32>;
            layers = <3>;
        };

        combo_to_qwerty_layer {
            bindings = <&tog 0>;
            key-positions = <36 37 40 41>;
        };

        combo_to_qwerty_combo_layer {
            bindings = <&tog 4>;
            key-positions = <40 41>;
        };

        combo_mo_sys_layer {
            bindings = <&mo 3>;
            key-positions = <36 37>;
        };

        Ditto {
            bindings = <&kp LC(GRAVE)>;
            key-positions = <3 16>;
        };

        MagicWand {
            bindings = <&kp GRAVE>;
            key-positions = <16 37>;
        };

        combo_lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <14 15>;
        };

        combo_rctrl {
            bindings = <&kp RCTRL>;
            key-positions = <21 20>;
        };

        combo_lalt {
            bindings = <&kp LALT>;
            key-positions = <15 16>;
        };

        combo_ralt {
            bindings = <&kp RALT>;
            key-positions = <19 20>;
        };

        combo_win {
            bindings = <&kp LCMD>;
            key-positions = <29 37>;
        };

        combo_2_PgUp {
            bindings = <&kp PG_UP>;
            key-positions = <31 20>;
            layers = <1>;
        };

        combo_2_PgDn {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <20 33>;
            layers = <1>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <25 26>;
        };

        combo_l_ak_Layer {
            bindings = <&lt 3 K_CONTEXT_MENU>;
            key-positions = <39 40>;
        };

        combo_r_ak_Layer {
            bindings = <&lt 3 LCTRL>;
            key-positions = <37 38>;
        };

        combo_toggle_layer_4 {
            bindings = <&tog 4>;
            key-positions = <36 37 38 29>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <16 17>;
        };

        combo_ctrl+alt {
            bindings = <&ctrlalt1>;
            key-positions = <19 18>;
        };

        combo_app_context {
            bindings = <&kp K_CONTEXT_MENU>;
            key-positions = <30 31>;
        };

        combo_alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <35 23>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        hmr: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hlt: hold_and_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_AND_TAB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        td_q: td_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Q";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&none>, <&kp LA(LC(NUMBER_6))>;
        };
    };

    macros {
        ctrlalt1: ctrlalt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LEFT_CONTROL>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LEFT_CONTROL>;

            label = "CTRLALT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&trans  &kp Q              &kp W         &kp E             &kp R         &kp T          &kp Y        &kp U        &kp I              &kp O    &kp P              &trans
&trans  &kp A              &kp S         &kp D             &kp F         &kp G          &kp H        &kp J        &kp K              &kp L    &kp SEMICOLON      &trans
&trans  &hmr LEFT_SHIFT Z  &hlt LC(X) X  &hlt LC(C) C      &hlt LC(V) V  &kp B          &kp N        &kp M        &kp COMMA          &kp DOT  &hmr RSHIFT SLASH  &trans
                                         &kp LEFT_CONTROL  &lt 1 SPACE   &lt 2 ENTER    &lt 2 ENTER  &lt 1 SPACE  &mt RIGHT_ALT ESC
            >;
        };

        numsym_layer {
            bindings = <
&trans  &kp N1        &kp N2     &kp N3   &kp N4     &kp N5       &kp NUMBER_6   &kp N7    &kp N8        &kp N9     &kp N0    &trans
&trans  &kp NUMBER_6  &kp N7     &kp N8   &kp MINUS  &kp EQUAL    &kp ASTERISK   &kp LEFT  &kp UP_ARROW  &kp RIGHT  &kp HOME  &trans
&trans  &kp GRAVE     &kp TILDE  &kp DQT  &kp SQT    &kp BSLH     &kp LESS_THAN  &kp LEFT  &kp DOWN      &kp RIGHT  &kp END   &trans
                                 &trans   &trans     &trans       &trans         &trans    &trans
            >;
        };

        fun_layer {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4   &kp F5          &kp F6                &kp F7          &kp F8          &kp F9     &kp F10  &trans
&trans  &kp F2  &kp F5  &kp F8  &kp F11  &kp C_MUTE      &kp C_PLAY_PAUSE      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp F11  &trans
&trans  &kp F3  &kp F6  &kp F9  &kp F12  &kp C_VOL_DN    &kp C_BRIGHTNESS_DEC  &kp K_UNDO      &kp K_REDO      &kp K_CUT  &kp F12  &trans
                        &trans  &trans   &trans          &trans                &trans          &trans
            >;
        };

        ahk_layer {
            bindings = <
&trans  &kp LA(LC(NUMBER_1))  &kp LA(LC(NUMBER_2))  &kp LA(LC(NUMBER_3))  &kp LA(LC(NUMBER_4))  &kp LA(LC(NUMBER_5))    &kp LA(LC(NUMBER_6))  &kt LA(LC(N7))    &kp LA(LC(N8))        &kp LA(LC(NUMBER_9))  &kp LA(LC(N0))          &trans
&trans  &kp LC(TAB)           &none                 &trans                &trans                &trans                  &kp LG(T)             &trans            &kp LA(LC(UP_ARROW))  &trans                &kp LA(LC(MINUS))       &trans
&trans  &kp LC(W)             &kp LG(F4)            &kp LG(T)             &trans                &trans                  &kp RG(F4)            &kp LG(LS(LEFT))  &kp LA(LC(DOWN))      &kp LS(LG(RIGHT))     &hmr RIGHT_SHIFT SLASH  &trans
                                                    &trans                &trans                &trans                  &trans                &trans            &trans
            >;
        };

        sys_layer {
            bindings = <
&trans  &trans        &trans        &bt BT_PRV    &bt BT_NXT    &trans            &none   &trans  &trans  &trans  &trans                &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &trans  &none   &none   &none   &tog 0                &trans
&trans  &bootloader   &sys_reset    &none         &bt BT_CLR    &bt BT_CLR_ALL    &none   &trans  &trans  &trans  &kp LA(LC(NUMBER_3))  &trans
                                    &trans        &trans        &trans            &trans  &trans  &trans
            >;
        };
    };
};
