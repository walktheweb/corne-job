/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * https://nickcoutsos.github.io/keymap-editor/
 * https://github.com/caksoylar/keymap-drawer
 
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&lt { tapping-term-ms = <400>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_left {
            bindings = <&kp LEFT>;
            key-positions = <19 20>;
        };

        combo_right {
            bindings = <&kp RIGHT>;
            key-positions = <20 21>;
        };

        combo_up {
            bindings = <&kp UP_ARROW>;
            key-positions = <19 8>;
        };

        combo_down {
            bindings = <&kp DOWN>;
            key-positions = <19 32>;
        };

        combo_home {
            bindings = <&kp HOME>;
            key-positions = <19 10>;
        };

        combo_end {
            bindings = <&kp END>;
            key-positions = <19 34>;
        };

        combo_PgUp {
            bindings = <&kp PAGE_UP>;
            key-positions = <19 9>;
        };

        combo_PgDn {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <19 33>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <27 28>;
        };

        combo_win {
            bindings = <&kp LEFT_WIN>;
            key-positions = <29 37>;
        };

        combo_layer_ahk_win_3 {
            bindings = <&lt 5 UNDERSCORE>;
            key-positions = <39 40>;
        };

        combo_context {
            bindings = <&kp K_CONTEXT_MENU>;
            key-positions = <31 41>;
        };

        combo_boot_r {
            bindings = <&bootloader>;
            key-positions = <41 34>;
        };

        combo_boot_l {
            bindings = <&bootloader>;
            key-positions = <36 25>;
        };

        combo_disp_5_sys_layer {
            bindings = <&kp LA(LG(F23))>;
            key-positions = <1 13 25>;
            layers = <0>;
        };

        combo_tog_layer_5_sys_layer {
            bindings = <&lt 6 RIGHT_WIN>;
            key-positions = <35>;
            layers = <6>;
        };

        combo_ditto {
            bindings = <&kp LC(GRAVE)>;
            key-positions = <16 4>;
        };

        combo_magid_wand {
            bindings = <&kp GRAVE>;
            key-positions = <5 17>;
        };

        combo_win_r {
            bindings = <&kp RIGHT_WIN>;
            key-positions = <40 30>;
        };

        combo_disp_1_num_layer {
            bindings = <&kp LA(LG(F24))>;
            key-positions = <1 13 25>;
            layers = <4>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
        };

        Combo_nump_1_Step1 {
            bindings = <&kp KP_NUMBER_1>;
            key-positions = <25 13>;
        };

        toggle_layer_Num_7 {
            bindings = <&tog 8>;
            key-positions = <34 22>;
        };

        F24-key_ahk_mute_teams {
            bindings = <&kp F24>;
            key-positions = <33 34 22>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        hmr: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        hlt: hold_and_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_AND_TAB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        td_q: td_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Q";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&none>, <&kp LA(LC(NUMBER_6))>;
        };
    };

    macros {
        cutline: cutline {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt HOME &kp LC(LS(END)) &kp LC(X) &kp DELETE>;
            label = "CUTLINE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp F24  &kp Q    &kp W  &kp E                     &kp R                 &kp T                        &kp Y        &kp U        &kp I      &kp O    &kp P          &kp LA(LG(LS(LC(F1))))
&trans   &lt 8 A  &kp S  &kp D                     &lt 2 F               &kp G                        &kp H        &lt 3 J      &kp K      &kp L    &kp SEMICOLON  &trans
&kp F23  &kp Z    &kp X  &kp C                     &kp V                 &lt 7 B                      &kp N        &kp M        &kp COMMA  &kp DOT  &kp SLASH      &trans
                         &hlt LEFT_CONTROL ESCAPE  &hlt LEFT_ALT DELETE  &hlt LEFT_SHIFT BACKSPACE    &lt 2 ENTER  &lt 7 SPACE  &lt 4 TAB
            >;
        };

        symbol_keep_typing_strong_J {
            bindings = <
&trans  &none      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SINGLE_QUOTE  &kp BACKSLASH       &none   &none   &none   &none  &none  &kp LS(LA(LC(LG(F1))))
&trans  &none      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp UNDER         &kp EQUAL           &none   &kt J   &none   &none  &none  &trans
&trans  &kp GRAVE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LESS_THAN     &kp GREATER_THAN    &none   &none   &none   &none  &none  &trans
                                         &trans                 &trans            &trans              &trans  &trans  &trans
            >;
        };

        fast_edit_strong_f {
            bindings = <
&trans  &none      &none      &none      &none   &none             &kp HOME   &kp BACKSPACE  &none         &kp DELETE     &kp END        &trans
&trans  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp F   &none             &kp LC(Z)  &kp LEFT       &kp UP_ARROW  &kp RIGHT      &kp PG_UP      &trans
&trans  &none      &none      &none      &none   &kp C_AC_PRINT    &kp LC(Y)  &kp LC(LEFT)   &kp DOWN      &kp LC(RIGHT)  &kp PAGE_DOWN  &trans
                              &trans     &trans  &trans            &trans     &trans         &trans
            >;
        };

        layer_1 {
            bindings = <
&trans  &none  &none     &none   &none   &none     &none        &kp BACKSPACE     &none         &kp DELETE         &kp END        &trans
&trans  &none  &none     &none   &none   &none     &kp PAGE_UP  &kp LEFT          &kp UP_ARROW  &kp RIGHT          &kp PAGE_DOWN  &trans
&trans  &none  &cutline  &none   &none   &none     &kp LC(Z)    &kp RC(RS(LEFT))  &kp DOWN      &kp RC(RS(RIGHT))  &kp RC(Y)      &trans
                         &trans  &trans  &trans    &trans       &trans            &trans
            >;
        };

        media_layer_2 {
            bindings = <
&trans  &none  &none  &none   &none   &none     &kp C_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp F9     &kp F10  &trans
&trans  &none  &none  &none   &none   &none     &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_NEXT       &none      &kp F11  &trans
&trans  &none  &none  &none   &none   &none     &none           &kp K_UNDO         &kp K_REDO       &kp K_CUT  &kp F12  &trans
                      &trans  &trans  &trans    &trans          &trans             &trans
            >;
        };

        ahk_win_layer {
            bindings = <
&trans  &kp LA(LC(NUMBER_1))  &kp LA(LC(NUMBER_2))  &kp LA(LC(NUMBER_3))  &kp LA(LC(NUMBER_4))  &kp LA(LC(NUMBER_5))    &kp LA(LC(NUMBER_6))  &kt LA(LC(N7))    &kp LA(LC(N8))        &kp LA(LC(NUMBER_9))  &kp LA(LC(N0))          &trans
&trans  &none                 &none                 &trans                &trans                &trans                  &kp LG(T)             &kp LS(LG(LEFT))  &kp LA(LC(UP_ARROW))  &kp LS(LG(RIGHT))     &kp LA(LC(MINUS))       &trans
&trans  &none                 &none                 &none                 &trans                &trans                  &kp LA(F4)            &none             &kp LA(LC(DOWN))      &none                 &hmr RIGHT_SHIFT SLASH  &trans
                                                    &trans                &trans                &trans                  &trans                &trans            &trans
            >;
        };

        sys_layer {
            bindings = <
&trans  &kp GRAVE     &trans        &bt BT_PRV    &bt BT_NXT    &trans            &none   &trans  &trans  &trans  &kp LS(LA(LC(LG(F23))))  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &trans  &none   &none   &none   &tog 0                   &trans
&trans  &bootloader   &sys_reset    &none         &bt BT_CLR    &bt BT_CLR_ALL    &none   &trans  &trans  &trans  &bootloader              &trans
                                    &trans        &trans        &trans            &trans  &trans  &trans
            >;
        };

        f-layer_6 {
            bindings = <
&trans  &none  &none  &none   &none   &none     &none   &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &none  &none  &none   &none   &none     &none   &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &none  &none  &none   &none   &none     &none   &kp F1  &kp F2  &kp F3  &kp F12  &trans
                      &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        numpad_strong_A_7 {
            bindings = <
&trans  &none  &none            &none   &none   &none     &kp PLUS   &kp N7        &kp N8        &kp N9        &kp ASTERISK  &trans
&trans  &kp A  &none            &none   &none   &none     &kp EQUAL  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0        &trans
&trans  &none  &kp PRINTSCREEN  &none   &none   &none     &kp MINUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH     &trans
                                &trans  &trans  &trans    &trans     &trans        &trans
            >;
        };
    };
};
